name: Hello World App

on:
  push:
    branches:
      - 'master'
   
  workflow_dispatch:

jobs:

  check-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
      - name: Check code meets quality standards
        id: code-inspector
        uses: codeinspectorio/github-action@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          code_inspector_api_token: ${{ secrets.CODE_INSPECTOR_API_TOKEN }}
          code_inspector_access_key: ${{ secrets.CODE_INSPECTOR_ACCESS_KEY }}
          code_inspector_secret_key: ${{ secrets.CODE_INSPECTOR_SECRET_KEY }}
          force_ref: 'none'
          min_quality_grade: 'WARNING'
          min_quality_score: '50'
          max_defects_rate: '0.0501'
          max_complex_functions_rate: '0.0001'
          max_long_functions_rate: '0.0001'
          project_name: ''
          max_timeout_sec: '600'

  codacy-analysis:
    runs-on: ubuntu-latest
    name: Codacy Analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

          # Upload the SARIF file generated in the previous step
          # - name: Upload SARIF results file
          #   uses: github/codeql-action/upload-sarif@main
          #   with:
          #     sarif_file: results.sarif


  build:
    runs-on: ubuntu-latest
    name: Build
    # needs: [codacy-analysis, check-quality]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          cache: 'maven'

      - name:  Maven build
        run: mvn -B package --file pom.xml
  helloworld-docker-image:
    runs-on: ubuntu-latest
    name: HelloWorld Docker build
    needs: [build]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: positivepay-artifact
          path: target

      - name: Display downloaded artifacts
        run: ls -R
        working-directory: target

      - name: Docker build
        run: docker build -t ${{ secrets.REGISTRY_USERNAME }}/helloworld:${{ github.sha }} -f Dockerfile helloworld

      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          registry: docker.io       # Server address of Docker registry. If not set then will default to Docker Hub
          username: ${{ secrets.REGISTRY_USERNAME }}    # Username used to log against the Docker registry
          password: ${{ secrets.REGISTRY_PASSWORD }}        # Password or personal access token used to log against the Docker registry

      - name: Docker Push
        run: docker push ${{ secrets.REGISTRY_USERNAME }}/helloworld:${{ github.sha }}

     
 
